{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0421\\u0415\\u041C\\u0415\\u0421\\u0422\\u0420 6\\\\RECIPE\\\\client\\\\src\\\\pages\\\\Calories.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../css.css'; // доступ к API сервиса погоды\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = {\n  key: 'c7616da4b68205c2f3ae73df2c31d177',\n  base: 'http://api.openweathermap.org/data/2.5/'\n};\n\nfunction Calories() {\n  _s();\n\n  // действия при изменении города в поле ввода\n  const [city, setCity] = useState(''); // действия с данными погоды\n\n  const [weather, setWeather] = useState({}); // обработчик, который срабатывает когда нажата клавиша Enter\n\n  const search = evt => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.base}weather?q=${city}&units=metric&appid=${api.key}`) // отправляем запрос\n      .then(res => res.json()) // ответ преобразуем в json\n      .then(result => {\n        // работаем с результатом\n        setWeather(result);\n        setCity('');\n        console.log(result);\n      });\n    }\n  }; // форматирование даты\n\n\n  const format_date = d => {\n    let months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n    let days = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  }; // JSX разметка\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"tbody\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: typeof weather.main != 'undefined' ? weather.main.temp > 16 ? 'app warm' : 'app' : 'app',\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"search-bar\",\n            placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A...\",\n            onChange: e => setCity(e.target.value),\n            value: city,\n            onKeyPress: search\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this), typeof weather.main != 'undefined' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"location\",\n              children: [weather.name, \", \", weather.sys.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date\",\n              children: format_date(new Date())\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temp\",\n              children: [Math.round(weather.main.temp), \"\\xB0c\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"weather\",\n              children: weather.weather[0].main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calories, \"8xhIkAHhqAUl+XfNTxNkLw546xY=\");\n\n_c = Calories;\nexport default Calories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calories\");","map":{"version":3,"sources":["D:/СЕМЕСТР 6/RECIPE/client/src/pages/Calories.js"],"names":["React","useState","api","key","base","Calories","city","setCity","weather","setWeather","search","evt","fetch","then","res","json","result","console","log","format_date","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","main","temp","e","target","value","name","sys","country","Date","Math","round"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,YAAP,C,CAEA;;;AACA,MAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,kCADK;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAZ;;AAKA,SAASC,QAAT,GAAoB;AAAA;;AAElB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAHkB,CAKlB;;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CANkB,CASlB;;AACA,QAAMS,MAAM,GAAGC,GAAG,IAAI;AACpB,QAAIA,GAAG,CAACR,GAAJ,KAAY,OAAhB,EAAyB;AACvBS,MAAAA,KAAK,CAAE,GAAEV,GAAG,CAACE,IAAK,aAAYE,IAAK,uBAAsBJ,GAAG,CAACC,GAAI,EAA5D,CAAL,CAAoE;AAApE,OACGU,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAC4B;AAD5B,OAEGF,IAFH,CAEQG,MAAM,IAAI;AAAU;AACxBP,QAAAA,UAAU,CAACO,MAAD,CAAV;AACAT,QAAAA,OAAO,CAAC,EAAD,CAAP;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,OANH;AAOD;AACF,GAVD,CAVkB,CAsBlB;;;AACA,QAAMG,WAAW,GAAIC,CAAD,IAAO;AACzB,QAAIC,MAAM,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,MAAvD,EAA+D,QAA/D,EAAyE,UAAzE,EAAqF,SAArF,EAAgG,QAAhG,EAA0G,SAA1G,CAAb;AACA,QAAIC,IAAI,GAAG,CAAC,aAAD,EAAgB,aAAhB,EAA+B,SAA/B,EAA0C,OAA1C,EAAmD,SAAnD,EAA8D,SAA9D,EAAyE,SAAzE,CAAX;AAEA,QAAIC,GAAG,GAAGD,IAAI,CAACF,CAAC,CAACI,MAAF,EAAD,CAAd;AACA,QAAIC,IAAI,GAAGL,CAAC,CAACM,OAAF,EAAX;AACA,QAAIC,KAAK,GAAGN,MAAM,CAACD,CAAC,CAACQ,QAAF,EAAD,CAAlB;AACA,QAAIC,IAAI,GAAGT,CAAC,CAACU,WAAF,EAAX;AAEA,WAAQ,GAAEP,GAAI,IAAGE,IAAK,IAAGE,KAAM,IAAGE,IAAK,EAAvC;AACD,GAVD,CAvBkB,CAmClB;;;AACA,sBACE,QAAC,SAAD;AACA,IAAA,SAAS,EAAC,OADV;AAAA,2BAEA;AAAK,MAAA,SAAS,EAAG,OAAOrB,OAAO,CAACuB,IAAf,IAAuB,WAAxB,GAAyCvB,OAAO,CAACuB,IAAR,CAAaC,IAAb,GAAoB,EAArB,GAA2B,UAA3B,GAAwC,KAAhF,GAAyF,KAAzG;AAAA,6BACE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,YAFZ;AAGE,YAAA,WAAW,EAAC,mCAHd;AAIE,YAAA,QAAQ,EAAEC,CAAC,IAAI1B,OAAO,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAJxB;AAKE,YAAA,KAAK,EAAE7B,IALT;AAME,YAAA,UAAU,EAAEI;AANd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,EAWI,OAAOF,OAAO,CAACuB,IAAf,IAAuB,WAAxB,gBACD;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,yBAA2BvB,OAAO,CAAC4B,IAAnC,QAA2C5B,OAAO,CAAC6B,GAAR,CAAYC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,wBAAuBnB,WAAW,CAAC,IAAIoB,IAAJ,EAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,yBACGC,IAAI,CAACC,KAAL,CAAWjC,OAAO,CAACuB,IAAR,CAAaC,IAAxB,CADH;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,wBAA0BxB,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBuB;AAA7C;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADC,GAaI,EAxBP;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GApEQ1B,Q;;KAAAA,Q;AAsET,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport '../css.css';\r\n\r\n// доступ к API сервиса погоды\r\nconst api = {\r\n  key: 'c7616da4b68205c2f3ae73df2c31d177',\r\n  base: 'http://api.openweathermap.org/data/2.5/'\r\n}\r\n\r\nfunction Calories() {\r\n\r\n  // действия при изменении города в поле ввода\r\n  const [city, setCity] = useState('');\r\n\r\n  // действия с данными погоды\r\n  const [weather, setWeather] = useState({});\r\n\r\n\r\n  // обработчик, который срабатывает когда нажата клавиша Enter\r\n  const search = evt => {\r\n    if (evt.key === 'Enter') {\r\n      fetch(`${api.base}weather?q=${city}&units=metric&appid=${api.key}`) // отправляем запрос\r\n        .then(res => res.json())  // ответ преобразуем в json\r\n        .then(result => {         // работаем с результатом\r\n          setWeather(result);\r\n          setCity('');\r\n          console.log(result);\r\n        });\r\n    }\r\n  }\r\n\r\n  // форматирование даты\r\n  const format_date = (d) => {\r\n    let months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\r\n    let days = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n  // JSX разметка\r\n  return (\r\n    <Container\r\n    className=\"tbody\">\r\n    <div className={(typeof weather.main != 'undefined') ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\r\n      <main>\r\n        <div className='search-box'>\r\n          <input\r\n            type='text'\r\n            className='search-bar'\r\n            placeholder='Поиск...'\r\n            onChange={e => setCity(e.target.value)}\r\n            value={city}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {(typeof weather.main != 'undefined') ? (\r\n        <div>\r\n          <div className='location-box'>\r\n            <div className='location'>{weather.name}, {weather.sys.country}</div>\r\n            <div className='date'>{format_date(new Date())}</div>\r\n          </div>\r\n          <div className='weather-box'>\r\n            <div className='temp'>\r\n              {Math.round(weather.main.temp)}°c\r\n            </div>\r\n            <div className='weather'>{weather.weather[0].main}</div>\r\n          </div>\r\n        </div>\r\n        ) : ('')}\r\n      </main>\r\n    </div></Container>\r\n  );\r\n}\r\n\r\nexport default Calories;"]},"metadata":{},"sourceType":"module"}