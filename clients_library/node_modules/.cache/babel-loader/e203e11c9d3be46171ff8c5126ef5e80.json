{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0421\\u0415\\u041C\\u0415\\u0421\\u0422\\u0420 6\\\\RECIPE\\\\client\\\\src\\\\pages\\\\AuthG.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Container, Form, Card, Button, Row } from \"react-bootstrap\";\nimport { Context } from \"../index\";\nimport jwt_decode from \"jwt-decode\";\nimport { NavLink, useLocation, useHistory } from \"react-router-dom\";\nimport { LOGIN_ROUTE, MAIN_ROUTE, REGISTRATION_ROUTE } from \"../utils/consts\";\nimport { login, registration, registration1 } from \"../http/userAPI\";\nimport { observer } from 'mobx-react-lite';\nimport \"../css.css\";\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"225202864346-k01k8j33vmutqn1nn0hforpo2alvv8va.apps.googleusercontent.com\";\nconst Auth = observer(_c = _s(() => {\n  _s();\n\n  const [loading, setLoading] = useState('Loading...');\n  const [users, setUser] = useState(null);\n  const [tk, setTk] = useState(null);\n  const {\n    user\n  } = useContext(Context);\n  let data;\n\n  const handleLoginSuccess = response => {\n    console.log(\"Login Success \", response);\n    setUser(response.profileObj);\n    setTk(response.tokenId);\n    data = registration(users.name, users.email, tk);\n    user.setUser(users);\n    user.setIsAuth(true);\n    console.log(data);\n    setLoading();\n  };\n\n  const reg = () => {};\n\n  const handleLoginFailure = error => {\n    console.log(\"Login Failure \", error);\n    setLoading();\n  };\n\n  const handleLogoutSuccess = response => {\n    console.log(\"Logout Success \", response);\n    setUser(null);\n  };\n\n  const handleLogoutFailure = error => {\n    console.log(\"Logout Failure \", error);\n  };\n\n  const handleRequest = () => {\n    setLoading(\"Loading...\");\n  };\n\n  const handleAutoLoadFinished = () => {\n    setLoading();\n  };\n\n  const history = useHistory();\n  const location = useLocation();\n  const isLogin = location.pathname === LOGIN_ROUTE;\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const storedToken = localStorage.getItem(\"token\");\n\n  if (storedToken) {\n    let decodedData = jwt_decode(storedToken, {\n      header: true\n    });\n    let expirationDate = decodedData.exp;\n    let current_time = Date.now() / 1000;\n\n    if (expirationDate < current_time) {\n      localStorage.removeItem(\"token\");\n    }\n  }\n\n  const click = async () => {\n    try {\n      let data;\n\n      if (isLogin) {\n        data = await login(email, password);\n        console.log(data);\n      } else {\n        data = await registration(name, email, password);\n      }\n\n      user.setUser(user);\n      user.setIsAuth(true);\n      history.push(MAIN_ROUTE);\n    } catch (e) {\n      alert(e.response.data.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"tbody\",\n    style: {\n      height: window.innerHeight - 54\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: 833\n      },\n      className: isLogin ? \"log\" : \"reg\",\n      children: users ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"name\",\n          children: [\"Welcome \", users.name, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogout, {\n          clientId: clientId,\n          onLogoutSuccess: handleLogoutSuccess,\n          onFailure: handleLogoutFailure\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(users, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: clientId,\n        buttonText: loading,\n        onSuccess: handleLoginSuccess,\n        onFailure: handleLoginFailure,\n        onRequest: handleRequest,\n        onAutoLoadFinished: handleAutoLoadFinished,\n        isSignedIn: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}, \"xLSULiafNVyIhlNPXSCoX5CSBSI=\", false, function () {\n  return [useHistory, useLocation];\n}));\n_c2 = Auth;\nexport default Auth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Auth$observer\");\n$RefreshReg$(_c2, \"Auth\");","map":{"version":3,"sources":["D:/СЕМЕСТР 6/RECIPE/client/src/pages/AuthG.js"],"names":["React","useContext","useState","Container","Form","Card","Button","Row","Context","jwt_decode","NavLink","useLocation","useHistory","LOGIN_ROUTE","MAIN_ROUTE","REGISTRATION_ROUTE","login","registration","registration1","observer","GoogleLogin","GoogleLogout","clientId","Auth","loading","setLoading","users","setUser","tk","setTk","user","data","handleLoginSuccess","response","console","log","profileObj","tokenId","name","email","setIsAuth","reg","handleLoginFailure","error","handleLogoutSuccess","handleLogoutFailure","handleRequest","handleAutoLoadFinished","history","location","isLogin","pathname","setName","password","setPassword","setEmail","storedToken","localStorage","getItem","decodedData","header","expirationDate","exp","current_time","Date","now","removeItem","click","push","e","alert","message","height","window","innerHeight","width","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,GAAxC,QAAmD,iBAAnD;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,OAAR,EAAiBC,WAAjB,EAA8BC,UAA9B,QAA+C,kBAA/C;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,kBAAlC,QAA4D,iBAA5D;AACA,SAAQC,KAAR,EAAeC,YAAf,EAA6BC,aAA7B,QAAiD,iBAAjD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,YAAP;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;;AACA,MAAMC,QAAQ,GAAG,0EAAjB;AAEA,MAAMC,IAAI,GAAGJ,QAAQ,SAAC,MAAM;AAAA;;AAExB,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,YAAD,CAAtC;AACF,QAAM,CAACwB,KAAD,EAAQC,OAAR,IAAmBzB,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAAC0B,EAAD,EAAKC,KAAL,IAAc3B,QAAQ,CAAC,IAAD,CAA5B;AACD,QAAM;AAAC4B,IAAAA;AAAD,MAAS7B,UAAU,CAACO,OAAD,CAAzB;AACA,MAAIuB,IAAJ;;AACC,QAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAA9B;AACAN,IAAAA,OAAO,CAACM,QAAQ,CAACG,UAAV,CAAP;AACAP,IAAAA,KAAK,CAACI,QAAQ,CAACI,OAAV,CAAL;AACAN,IAAAA,IAAI,GAAGd,YAAY,CAACS,KAAK,CAACY,IAAP,EAAaZ,KAAK,CAACa,KAAnB,EAA0BX,EAA1B,CAAnB;AACAE,IAAAA,IAAI,CAACH,OAAL,CAAaD,KAAb;AACAI,IAAAA,IAAI,CAACU,SAAL,CAAe,IAAf;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAN,IAAAA,UAAU;AACX,GATD;;AAUD,QAAMgB,GAAG,GAAE,MAAI,CAEd,CAFD;;AAGC,QAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAClCT,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BQ,KAA9B;AACAlB,IAAAA,UAAU;AACX,GAHD;;AAKA,QAAMmB,mBAAmB,GAAIX,QAAD,IAAc;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,QAA/B;AACAN,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,QAAMkB,mBAAmB,GAAGF,KAAK,IAAI;AACnCT,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,KAA/B;AACD,GAFD;;AAIA,QAAMG,aAAa,GAAG,MAAM;AAC1BrB,IAAAA,UAAU,CAAC,YAAD,CAAV;AACD,GAFD;;AAIA,QAAMsB,sBAAsB,GAAG,MAAM;AACnCtB,IAAAA,UAAU;AACX,GAFD;;AAKE,QAAMuB,OAAO,GAAGpC,UAAU,EAA1B;AACA,QAAMqC,QAAQ,GAAGtC,WAAW,EAA5B;AAGA,QAAMuC,OAAO,GAAGD,QAAQ,CAACE,QAAT,KAAsBtC,WAAtC;AACA,QAAM,CAACyB,IAAD,EAAOc,OAAP,IAAkBlD,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACmD,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACqC,KAAD,EAAQgB,QAAR,IAAoBrD,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMsD,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;;AACA,MAAIF,WAAJ,EAAgB;AACZ,QAAIG,WAAW,GAAGlD,UAAU,CAAC+C,WAAD,EAAc;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAAd,CAA5B;AACA,QAAIC,cAAc,GAAGF,WAAW,CAACG,GAAjC;AACA,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAhC;;AACA,QAAGJ,cAAc,GAAGE,YAApB,EACA;AACIN,MAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACH;AACJ;;AAED,QAAMC,KAAK,GAAG,YAAY;AACtB,QAAI;AACA,UAAIpC,IAAJ;;AACA,UAAImB,OAAJ,EAAa;AACTnB,QAAAA,IAAI,GAAG,MAAMf,KAAK,CAACuB,KAAD,EAAQc,QAAR,CAAlB;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,OAHD,MAGO;AACHA,QAAAA,IAAI,GAAG,MAAMd,YAAY,CAACqB,IAAD,EAAOC,KAAP,EAAcc,QAAd,CAAzB;AACH;;AACDvB,MAAAA,IAAI,CAACH,OAAL,CAAaG,IAAb;AACAA,MAAAA,IAAI,CAACU,SAAL,CAAe,IAAf;AACAQ,MAAAA,OAAO,CAACoB,IAAR,CAAatD,UAAb;AACH,KAXD,CAWE,OAAOuD,CAAP,EAAU;AACRC,MAAAA,KAAK,CAACD,CAAC,CAACpC,QAAF,CAAWF,IAAX,CAAgBwC,OAAjB,CAAL;AACH;AAEJ,GAhBD;;AAkBI,sBACA,QAAC,SAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAEC,MAAM,CAACC,WAAP,GAAmB;AAA5B,KAFX;AAAA,2BAII,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAb;AAA0B,MAAA,SAAS,EAAEzB,OAAO,GAAG,KAAH,GAAU,KAAtD;AAAA,gBAmEaxB,KAAK,gBAAG;AAAA,gCACT;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCAA+BA,KAAK,CAACY,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADS,eAEL,QAAC,YAAD;AACA,UAAA,QAAQ,EAAEhB,QADV;AAEA,UAAA,eAAe,EAAEsB,mBAFjB;AAGA,UAAA,SAAS,EAAEC;AAHX;AAAA;AAAA;AAAA;AAAA,gBAFK,eAOL;AAAA,oBAAM+B,IAAI,CAACC,SAAL,CAAenD,KAAf,EAAsB,IAAtB,EAA4B,CAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,gBAPK;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBASN,QAAC,WAAD;AACI,QAAA,QAAQ,EAAEJ,QADd;AAEI,QAAA,UAAU,EAAEE,OAFhB;AAGI,QAAA,SAAS,EAAEQ,kBAHf;AAII,QAAA,SAAS,EAAEU,kBAJf;AAKI,QAAA,SAAS,EAAEI,aALf;AAMI,QAAA,kBAAkB,EAAEC,sBANxB;AAOI,QAAA,UAAU,EAAE;AAPhB;AAAA;AAAA;AAAA;AAAA;AA5EZ;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADA;AA+FP,CAhLoB;AAAA,UA2CDnC,UA3CC,EA4CAD,WA5CA;AAAA,GAArB;MAAMY,I;AAkLN,eAAeA,IAAf","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport { Container, Form, Card, Button, Row } from \"react-bootstrap\";\r\nimport {Context} from \"../index\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {NavLink, useLocation, useHistory} from \"react-router-dom\";\r\nimport { LOGIN_ROUTE, MAIN_ROUTE, REGISTRATION_ROUTE } from \"../utils/consts\";\r\nimport {login, registration, registration1} from \"../http/userAPI\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport \"../css.css\";\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nconst clientId = \"225202864346-k01k8j33vmutqn1nn0hforpo2alvv8va.apps.googleusercontent.com\"\r\n\r\nconst Auth = observer(() => {\r\n    \r\n    const [loading, setLoading] = useState('Loading...');\r\n  const [users, setUser] = useState(null);\r\n  const [tk, setTk] = useState(null)\r\n const {user} = useContext(Context)\r\n let data\r\n  const handleLoginSuccess = (response) => {\r\n    console.log(\"Login Success \", response);\r\n    setUser(response.profileObj);\r\n    setTk(response.tokenId)\r\n    data = registration(users.name, users.email, tk)\r\n    user.setUser(users)\r\n    user.setIsAuth(true)\r\n    console.log(data)\r\n    setLoading();\r\n  }\r\n const reg =()=>{\r\n    \r\n }\r\n  const handleLoginFailure = error => {\r\n    console.log(\"Login Failure \", error);\r\n    setLoading();\r\n  }\r\n \r\n  const handleLogoutSuccess = (response) => {\r\n    console.log(\"Logout Success \", response);\r\n    setUser(null);\r\n  }\r\n \r\n  const handleLogoutFailure = error => {\r\n    console.log(\"Logout Failure \", error);\r\n  }\r\n \r\n  const handleRequest = () => {\r\n    setLoading(\"Loading...\");\r\n  }\r\n \r\n  const handleAutoLoadFinished = () => {\r\n    setLoading();\r\n  }\r\n\r\n\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    \r\n\r\n    const isLogin = location.pathname === LOGIN_ROUTE\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    \r\n    const storedToken = localStorage.getItem(\"token\");\r\n    if (storedToken){\r\n        let decodedData = jwt_decode(storedToken, { header: true });\r\n        let expirationDate = decodedData.exp;\r\n        let current_time = Date.now() / 1000;\r\n        if(expirationDate < current_time)\r\n        {\r\n            localStorage.removeItem(\"token\");\r\n        }\r\n    }\r\n\r\n    const click = async () => {\r\n        try {\r\n            let data;\r\n            if (isLogin) {\r\n                data = await login(email, password);\r\n                console.log(data)\r\n            } else {\r\n                data = await registration(name, email, password);\r\n            }\r\n            user.setUser(user)\r\n            user.setIsAuth(true)\r\n            history.push(MAIN_ROUTE)\r\n        } catch (e) {\r\n            alert(e.response.data.message)\r\n        }\r\n\r\n    }\r\n\r\n        return (\r\n        <Container \r\n            className=\"tbody\"\r\n            style={{height: window.innerHeight-54}}> \r\n            \r\n            <Card style={{width:833}} className={isLogin ? \"log\": \"reg\"}>\r\n                {/* <h2 className = \"authreg\">{isLogin ? 'Авторизация': \"Регистрация\"}</h2>\r\n                <Form>\r\n                    {isLogin? \r\n                    <div>\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Введите ваш email...\"\r\n                        id=\"p1\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Введите ваш пароль...\"\r\n                        id=\"p2\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                    />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Ваше имя...\"\r\n                        id=\"p1\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Введите ваш email...\"\r\n                        id=\"p6\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Введите пароль...\"\r\n                        id=\"p7\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                    />\r\n                    <Form.Control\r\n                        className=\"pole\"\r\n                        placeholder=\"Повторите пароль...\"\r\n                        id=\"p8\"\r\n                    />\r\n                    </div>\r\n                    }\r\n                    <Row className=\"butreg\">\r\n                        {isLogin?\r\n                        <div>\r\n                            Нет аккаунта? <NavLink to={REGISTRATION_ROUTE}>Создать аккаунт</NavLink>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            Есть аккаунт? <NavLink to={LOGIN_ROUTE}>Войти</NavLink>\r\n                        </div>\r\n                        }\r\n                        <Button className=\"vhodreg\"\r\n                        onClick={click}\r\n                        variant={\"outline-succes\"}>\r\n                            {isLogin? \"Войти\" : \"Регистрация\"}\r\n                        </Button> */}\r\n                        {users ? <div>\r\n                        <div className=\"name\">Welcome {users.name}!</div>\r\n                            <GoogleLogout\r\n                            clientId={clientId}\r\n                            onLogoutSuccess={handleLogoutSuccess}\r\n                            onFailure={handleLogoutFailure}\r\n                            />\r\n                            <pre>{JSON.stringify(users, null, 2)}</pre>\r\n                        </div> :\r\n                        <GoogleLogin\r\n                            clientId={clientId}\r\n                            buttonText={loading}\r\n                            onSuccess={handleLoginSuccess}\r\n                            onFailure={handleLoginFailure}\r\n                            onRequest={handleRequest}\r\n                            onAutoLoadFinished={handleAutoLoadFinished}\r\n                            isSignedIn={true}\r\n                        />}\r\n                    \r\n            </Card>\r\n        </Container>\r\n    );\r\n    \r\n});\r\n\r\nexport default Auth;"]},"metadata":{},"sourceType":"module"}